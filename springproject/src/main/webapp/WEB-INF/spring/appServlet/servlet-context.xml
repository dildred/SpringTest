<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
		>

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<default-servlet-handler/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>
		<message-converters>
		<beans:bean
			class="org.springframework.http.converter.StringHttpMessageConverter">
			<beans:property name="supportedMediaTypes">
				<beans:list>
					<beans:value>text/html; charset=UTF-8</beans:value>
				</beans:list>
			</beans:property>
		</beans:bean>
		</message-converters>
	</annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/"  />
	<resources mapping="/img/**" location="/resources/image/"  />
	<!-- js아래에 하위폴더 생성할 때에 매핑 설정해 줄 것. css도 마찬가지 -->
	<!-- 공통설정 매핑 -->
	<resources mapping="/js/process/**" location="/resources/js/process/"  />
	<!-- 개별 처리 설정 매핑 -->
	<!-- 재료 js,css -->
	<resources mapping="/js/material/**" location="/resources/js/material/"  />
	<resources mapping="/css/material/**" location="/resources/css/material/" />
	<!-- 발주 js,css -->
	<resources mapping="/js/order/**" location="/resources/js/order/"  />
	<resources mapping="/css/order/**" location="/resources/css/order/" />

	<!-- 회원가입 js -->
	<resources mapping="/js/staff/**" location="/resources/js/staff/"  />
	<!-- 아래에 있는 것이 컨트롤러 설정 자세한 내용은 TestController파일 참고 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/"/>
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 아래에 적혀있는 패키지 이후의 모든 파일을 스캔하여 @Controller, @Service, @Repository, @Component라고 적혀있는 자바 파일을 전부 자바 Bean 컨테이너에 등록시켜줌 -->
	<context:component-scan base-package="com.project.emp.*" />
	
	<!-- 트랜잭션 aop설정 -->
    <beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<beans:property name="dataSource" ref="dataSource"></beans:property>
    </beans:bean>
    
    <aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(public * com.project.emp.service.*Service.*(..))" id="serviceOperation"/>
		<aop:advisor advice-ref="txAdvice" id="transactionAdvisor" pointcut-ref="serviceOperation"/>
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="regist*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
</beans:beans>
